<?php

namespace LavasecoBundle\Repository;

/**
 * BillRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BillRepository extends \Doctrine\ORM\EntityRepository {

    public function getConsecutive() {
        $consecutive = 0;
        $bill = $this->createQueryBuilder('b')
                ->orderBy("b.consecutive", "DESC")
                ->getQuery()
                ->getResult();

        if ($bill) {
            $consecutive = $bill[0]->getConsecutive() + 1;
        } else {
            $consecutive = 1;
        }

        return $consecutive;
    }

    public function getBillsByProcessId($processId) {
        $bills = $this->createQueryBuilder('b')
                ->where('b.processState = :processStateId')
                ->setParameter('processStateId', $processId)
                ->getQuery();

        return $bills->getResult();
    }

    public function findDelivered() {
        $bills = $this->createQueryBuilder('b')
                ->where('b.processState = 7')
                ->orWhere('b.billState = 3')
                ->getQuery();

        return $bills->getResult();
    }

    public function findUndelivered() {
        $bills = $this->createQueryBuilder('b')
                ->where('b.processState != 7')
                ->andWhere('b.billState != 3')
                ->getQuery();

        return $bills->getResult();
    }

    public function getUnprintedBillAndTikets() {
        $bills = $this->createQueryBuilder('b')
                ->where('b.printBill = true')
                ->andWhere('b.printedTiket = true')
                ->getQuery();

        return $bills->getResult();
    }

    public function getUnprintedTikets() {
        $bills = $this->createQueryBuilder('b')
                ->where('b.printBill = false')
                ->andWhere('b.printedTiket = true')
                ->getQuery();

        return $bills->getResult();
    }

    public function dailySale($from, $to, $salePoint = 0) {
        $procedure = "CALL saleDailyReport('" . $from->format('Y-m-d 00:00:00') . "', '" . $to->format('Y-m-d 23:59:59') . "'," . $salePoint . ")";
        $em = $this->getEntityManager()->getConnection();
        $sth = $em->prepare($procedure);
        $sth->execute();
        
        return $sth->fetchAll();
    }

}
